<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MySQL on 林风's Blog</title><link>https://leoxiewl.github.io/tags/mysql/</link><description>Recent content in MySQL on 林风's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 26 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://leoxiewl.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>高性能MySQL-高性能MySQL-schema设计与管理</title><link>https://leoxiewl.github.io/2024/02/26/high-performance-mysql-schema/</link><pubDate>Mon, 26 Feb 2024 00:00:00 +0000</pubDate><guid>https://leoxiewl.github.io/2024/02/26/high-performance-mysql-schema/</guid><description>&lt;h2 id="数据类型设计基本原则">数据类型设计基本原则&lt;/h2>
&lt;p>&lt;strong>更小的通常更好&lt;/strong>&lt;/p>
&lt;p>一般来说，尽量使用能够正确存储和表示数据的最小数据类型。&lt;/p>
&lt;p>更小的数据类型&lt;strong>更快&lt;/strong>，因为他们占用的磁盘、内存和CPU缓存的空间更少，处理时需要的CPU周期也更少。&lt;/p>
&lt;p>不过要注意不能超过范围，在表中加数据类型范围是一个痛苦且耗时的操作。&lt;/p>
&lt;p>&lt;strong>简单为好&lt;/strong>&lt;/p>
&lt;p>简单数据类型的操作通常需要更少的CPU周期。&lt;/p>
&lt;p>例如，&lt;strong>整型数据比字符型数据的比较操作代价更低&lt;/strong>，因为字符集和排序规则（collation）使字符型数据的比较更复杂。&lt;/p>
&lt;p>存储图片数据不直接存储在MySQL数据库当中，而是在对象存储当中，数据库字段当中只存储图片地址&lt;/p>
&lt;blockquote>
&lt;p>应该将日期和时间存储为MySQL的内置类型而不是字符串类型&lt;/p>
&lt;p>应该用整型数据存储IP地址。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>尽量避免存储NULL&lt;/strong>&lt;/p>
&lt;p>通常情况下最好指定列为NOT NULL，除非明确需要存储NULL值。&lt;/p>
&lt;p>为什么呢？&lt;/p>
&lt;p>如果查询中包含可为NULL的列对于MySQL来说更难优化。因为可为NULL的列使得索引、索引统计和值比较都更复杂。可为NULL的列会使用更多的存储空间，在MySQL里也需要特殊处理。&lt;/p>
&lt;blockquote>
&lt;p>通常把可为NULL的列改为NOT NULL带来的&lt;strong>性能提升比较小&lt;/strong>，所以（调优时）没有必要首先在现有schema中查找并修改这种情况，除非确定这会导致问题。&lt;/p>
&lt;/blockquote>
&lt;h2 id="选择数据类型步骤">选择数据类型步骤&lt;/h2>
&lt;ol>
&lt;li>第一步需要确定合适的大类型：数字、字符串、时间等&lt;/li>
&lt;li>第二步是选择具体类型&lt;/li>
&lt;/ol>
&lt;p>关注存储的&lt;strong>值范围、表示的精度或者需要的物理空间&lt;/strong>（磁盘和内存）上存在着差异。&lt;/p>
&lt;p>&lt;strong>步骤1&lt;/strong>：确定数据的大类&lt;/p>
&lt;p>数值类型、字符串类型、日期和时间类型、二进制类型等&lt;/p>
&lt;p>&lt;strong>步骤2&lt;/strong>：选择具体数据类型&lt;/p>
&lt;ol>
&lt;li>&lt;strong>值范围&lt;/strong>：考虑数据可能的最小值和最大值。例如，如果你需要存储年龄，可以选择&lt;code>TINYINT&lt;/code>，但如果是存储较大数值，可能需要&lt;code>INT&lt;/code>或&lt;code>BIGINT&lt;/code>。&lt;/li>
&lt;li>&lt;strong>精度&lt;/strong>：对于浮点数和小数，考虑所需的精度。&lt;code>FLOAT&lt;/code>或&lt;code>DOUBLE&lt;/code>适用于浮点数，而&lt;code>DECIMAL&lt;/code>适用于需要固定小数点的场合。&lt;/li>
&lt;li>&lt;strong>物理空间&lt;/strong>：估算数据占用的磁盘和内存空间。例如，&lt;code>VARCHAR&lt;/code>和&lt;code>TEXT&lt;/code>类型可以存储相同类型的数据，但&lt;code>VARCHAR&lt;/code>可以指定最大长度，可能更节省空间。&lt;/li>
&lt;li>&lt;strong>性能&lt;/strong>：数据类型的选择也会影响数据库的性能。通常，更小的数据类型会有更好的性能，因为它们占用更少的磁盘、内存和处理时间。&lt;/li>
&lt;li>&lt;strong>特定功能&lt;/strong>：某些数据类型支持特定的数据库功能，如全文索引或空间数据处理。&lt;/li>
&lt;/ol>
&lt;p>其他考虑因素&lt;/p>
&lt;ul>
&lt;li>&lt;strong>索引&lt;/strong>：如果某列会被频繁用作索引，选择合适的数据类型可以提高索引效率。&lt;/li>
&lt;li>&lt;strong>默认值&lt;/strong>：考虑是否需要为字段设置默认值。&lt;/li>
&lt;li>&lt;strong>允许的空值&lt;/strong>：确定字段是否可以接受&lt;code>NULL&lt;/code>值。&lt;/li>
&lt;li>&lt;strong>字符集和排序规则&lt;/strong>：对于字符串类型，需要考虑字符集和排序规则，特别是在处理多语言数据时。&lt;/li>
&lt;/ul>
&lt;h2 id="mysql-数据库数据类型">MySQL 数据库数据类型&lt;/h2>
&lt;h3 id="整数类型">整数类型&lt;/h3>
&lt;p>&lt;strong>数字类型&lt;/strong>：整数（whole number）和实数（real number，带有小数部分的数字）&lt;/p>
&lt;p>&lt;strong>整数类型&lt;/strong>：TINYINT、SMALLINT、MEDIUMINT、INT或BIGINT。它们分别使用8、16、24、32和64位存储空间。可以存储的值的范围从-2（N-1）到2（N-1）-1，其中N是存储空间的位数。&lt;/p>
&lt;p>整数类型有可选的&lt;strong>UNSIGNED属性&lt;/strong>，表示不允许负值，这大致可以使正数的上限提高一倍。&lt;/p>
&lt;p>&lt;strong>有符号和无符号类型使用相同的存储空间&lt;/strong>，并具有相同的性能，因此可以根据数据实际范围选择合适的类型。&lt;/p>
&lt;p>&lt;strong>整数计算&lt;/strong>通常使用64位的&lt;strong>BIGINT&lt;/strong>整数。（一些聚合函数是例外，它们使用DECIMAL或DOUBLE进行计算。）&lt;/p>
&lt;p>MySQL可以为&lt;strong>整数类型指定宽度&lt;/strong>，例如，INT（11），这对大多数应用毫无意义：它不会限制值的合法范围，只是规定了MySQL的一些交互工具（例如，MySQL命令行客户端）用来显示字符的个数。对于存储和计算来说，INT（1）和INT（20）是相同的。&lt;/p>
&lt;h3 id="实数类型">实数类型&lt;/h3>
&lt;p>实数是带有小数部分的数字。&lt;/p>
&lt;p>MySQL既支持精确类型，也支持不精确类型。&lt;/p>
&lt;p>FLOAT和DOUBLE类型支持使用标准的浮点运算进行近似计算。&lt;/p>
&lt;p>浮点类型通常比DECIMAL使用&lt;strong>更少的空间&lt;/strong>来存储相同范围的值。FLOAT列使用4字节的存储空间。DOUBLE占用8字节，比FLOAT具有&lt;strong>更高的精度和更大的值范围&lt;/strong>。&lt;/p>
&lt;p>应该使用可以满足需求的最小精度，&lt;/p>
&lt;h3 id="字符串类型">字符串类型&lt;/h3>
&lt;h4 id="varchar和char类型选用">&lt;strong>VARCHAR和CHAR类型&lt;/strong>选用&lt;/h4>
&lt;blockquote>
&lt;p>不同引擎中这两种类型存储可能不同&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>InnoDB&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>VARCHAR&lt;/strong>：可以存储可变长字符串类型。比固定长度&lt;strong>更省空间&lt;/strong>，仅仅使用必要的空间没有空值。&lt;/p>
&lt;p>VARCHAR需要额外使用1或2字节记录字符串的长度&lt;/p>
&lt;blockquote>
&lt;p>假设采用latin1字符集，一个VARCHAR（10）的列需要11字节的存储空间。VARCHAR（1000）的列则需要1002个字节，因为需要2字节存储长度信息。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>缺点&lt;/strong>：行是可变长的，在更新的时候行会增长，这会导致额外的问题。InnoDB可能需要分割页面来容纳行。&lt;/p>
&lt;p>&lt;strong>应用场景&lt;/strong>：字符串列的最大长度远大于平均长度；列的更新很少，所以碎片不是问题；使用了像UTF-8这样复杂的字符集，每个字符都使用不同的字节数进行存储。&lt;/p>
&lt;p>&lt;strong>CHAR&lt;/strong>&lt;/p>
&lt;p>CHAR是固定长度的，要为字符串分配足够的空间&lt;/p>
&lt;p>当存储CHAR值时，MySQL删除所有尾随空格。如果需要进行比较，值会用空格填充。&lt;/p>
&lt;p>&lt;strong>应用&lt;/strong>：&lt;/p>
&lt;p>CHAR适合&lt;strong>存储非常短&lt;/strong>的字符串，或者适用于&lt;strong>所有值的长度都几乎相同&lt;/strong>的情况。&lt;/p>
&lt;blockquote>
&lt;p>例如，对于&lt;strong>用户密码的MD5值&lt;/strong>，CHAR是一个很好的选择，它们的长度总是相同的&lt;/p>
&lt;/blockquote>
&lt;p>更新频繁的数据用CHAR也更好，因为固定长度不容易出现内存碎片。&lt;/p>
&lt;p>但是CHAR类型末尾存空格的时候会被自动去掉&lt;/p>
&lt;p>与CHAR和VARCHAR类似的类型还有&lt;strong>BINARY和VARBINARY&lt;/strong>，它们存储的是二进制字符串。二进制字符串与常规字符串非常相似，但它们存储的是字节而不是字符。&lt;/p>
&lt;h4 id="varchar5和varchar200哪个更好">VARCHAR（5）和VARCHAR（200）哪个更好？&lt;/h4>
&lt;p>使用VARCHAR（5）和VARCHAR（200）存储&amp;rsquo;hello&amp;rsquo;的空间开销是一样的&lt;/p>
&lt;p>&lt;strong>较大的列会使用更多的内存&lt;/strong>，因为MySQL通常会在内部分配固定大小的内存块来保存值，分配更大的内存会对内存临时表的排序和操作造成影响。&lt;/p>
&lt;p>最好的策略是只分配真正需要的空间。&lt;/p>
&lt;h3 id="blob和text类型">BLOB和TEXT类型&lt;/h3>
&lt;p>用来存储很大数据字符串类型。&lt;/p>
&lt;p>BLOB采用二进制方式；TEXT采用字符方式。&lt;/p>
&lt;p>&lt;strong>字符类型&lt;/strong>是TINYTEXT、SMALLTEXT、TEXT、MEDIUMTEXT和LONGTEXT；&lt;/p>
&lt;p>&lt;strong>二进制类型&lt;/strong>是TINYBLOB、SMALLBLOB、BLOB、MEDIUMBLOB、LONGBLOB。&lt;/p>
&lt;p>BLOB是SMALLBLOB的同义词，TEXT是SMALLTEXT的同义词。&lt;/p>
&lt;p>&lt;strong>存储引擎通常会专门存储它们&lt;/strong>。当BLOB和TEXT值太大时，InnoDB会使用独立的“外部”存储区域，此时每个值在行内需要1～4字节的存储空间，然后在外部存储区域需要足够的空间来存储实际的值。&lt;/p>
&lt;p>BLOB和TEXT家族之间的&lt;strong>唯一区别&lt;/strong>是，BLOB类型存储的是二进制数据，没有排序规则或字符集，但TEXT类型有字符集和排序规则。&lt;/p>
&lt;p>&lt;strong>MySQL不能将BLOB和TEXT数据类型的完整字符串放入索引，也不能使用索引进行排序。&lt;/strong>&lt;/p>
&lt;h4 id="在数据库中存储图像">在数据库中存储图像？&lt;/h4>
&lt;p>把图像以BLOB类型存储在数据库中，随着数据大小的增长，修改表的操作会由于BLOB数据的大小而变得越来越慢。&lt;/p>
&lt;p>最好把它存在对象存储中，比如OSS、COS&lt;/p>
&lt;h3 id="使用枚举代替字符串类型">使用枚举代替字符串类型&lt;/h3>
&lt;p>有时可以使用ENUM（枚举）列代替常规的字符串类型。&lt;/p>
&lt;p>MySQL在存储枚举时非常紧凑&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ENUM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fish&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;apple&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;dog&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enum_test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fish&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="s1">&amp;#39;dog&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="s1">&amp;#39;apple&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面三行实际上存储的是整数，而不是字符串&lt;/p>
&lt;p>&lt;img src="https://leoxiewl.github.io/%e9%ab%98%e6%80%a7%e8%83%bdMySQL-schema%e8%ae%be%e8%ae%a1%e4%b8%8e%e7%ae%a1%e7%90%86.assets/1708963403527-1.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>如果使用数字作为ENUM常量，这种双重属性很容易导致混乱，例如，ENUM（&amp;lsquo;1&amp;rsquo;，&amp;lsquo;2&amp;rsquo;，&amp;lsquo;3&amp;rsquo;）。尽量避免这么做。&lt;/p>
&lt;p>ENUM字段是根据内部整数值排序的，而不是根据字符串本身：&lt;/p>
&lt;p>&lt;img src="https://leoxiewl.github.io/%e9%ab%98%e6%80%a7%e8%83%bdMySQL-schema%e8%ae%be%e8%ae%a1%e4%b8%8e%e7%ae%a1%e7%90%86.assets/1708963409375-4.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>在查询中使用FIELD()函数显式地指定排序顺序，但这会导致MySQL无法利用索引消除排序：&lt;/p>
&lt;p>MySQL将每个枚举值存储为整数，并且必须进行查找以将其转换为字符串表示，因此ENUM列有一些开销。这些开销通常可以被ENUM列的小尺寸所抵消，但并不总是如此。特别是，将CHAR/VARCHAR列联接到ENUM列可能比联接到另一个CHAR/VARCHAR列更慢。&lt;/p>
&lt;h3 id="日期和时间类型">日期和时间类型&lt;/h3>
&lt;p>MySQL可以存储的最小时间粒度是微秒。&lt;/p>
&lt;p>MySQL提供了DATETIME和TIMESTAMP存储时间&lt;/p>
&lt;p>&lt;strong>DATETIME&lt;/strong>&lt;/p>
&lt;p>可以&lt;strong>保存大范围的数值&lt;/strong>，从1000年到9999年，精度为1微秒。它以YYYYMMDDHHMMSS格式存储压缩成整数的日期和时间，且与时区无关。这需要8字节的存储空间。&lt;/p>
&lt;p>默认情况下，MySQL以可排序、无歧义的格式显示DATETIME值，例如，2008-01-16 22：37：08。这是ANSI表示日期和时间的标准方式。&lt;/p>
&lt;p>&lt;strong>TIMESTAMP&lt;/strong>&lt;/p>
&lt;p>TIMESTAMP类型存储自1970年1月1日格林尼治标准时间（GMT）午夜以来经过的秒数——与UNIX时间戳相同。TIMESTAMP只使用4字节的存储空间，所以它的&lt;strong>范围比DATETIME小得多&lt;/strong>：只能表示从1970年到2038年1月19日&lt;/p>
&lt;p>MySQL提供FROM_UNIXTIME()函数来将UNIX时间戳转换为日期，并提供了UNIX_TIMESTAMP()函数将日期转换为UNIX时间戳。&lt;/p>
&lt;p>时间戳显示的值依赖于&lt;strong>时区&lt;/strong>。MySQL服务器、操作系统和客户端连接都有时区设置。&lt;/p>
&lt;p>没有指定的时候，TIMESTAMP列的值，MySQL默认也会将该列的值更新为当前时间。&lt;/p>
&lt;p>TIMESTAMP列在默认情况下为NOT NULL&lt;/p>
&lt;h4 id="将日期和时间存储为整数">将日期和时间存储为整数？&lt;/h4>
&lt;p>通过将日期和时间存储为UNIX纪元（即自1970年1月1日以来的秒数），以协调世界时（UTC）的形式，可避免MySQL处理的复杂性，这一做法越来越流行。使用带符号的32位INT，可以表达直到2038年的时间。使用无符号的32位INT，可以表达直到2106年的时间。如果使用64位，还可以超出这些范围。&lt;/p>
&lt;h3 id="位压缩数据类型">位压缩数据类型&lt;/h3>
&lt;p>所有这些位压缩类型，不管底层存储和处理方式如何，从技术上来说都是&lt;strong>字符串类型&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>BIT&lt;/strong>&lt;/p>
&lt;p>可以使用BIT列存储一个或多个true/false值。BIT（1）定义一个包含1位的字段，BIT（2）存储2位的字段，依此类推；BIT列的最大长度为64位。&lt;strong>InnoDB将每一列存储为足够容纳这些位的最小整数类型，所以使用BIT列不会节省任何存储空间。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>建议谨慎使用BIT类型。对于大多数应用来说，最好避免使用这种类型。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>除非你非常注重节省空间，否则我们仍然建议使用TINYINT。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>SET&lt;/strong>&lt;/p>
&lt;p>如果需要存储多个true/false值，可以考虑使用MySQL原生的SET数据类型，可以将多列组合成一列，这在MySQL内部是以一组打包的位的集合来表示的。这样可以更有效地利用存储空间，MySQL具有FIND_IN_SET()和FIELD()等函数，使其易于在查询中使用。&lt;/p>
&lt;h3 id="选择标识符主键">选择标识符（主键）&lt;/h3>
&lt;p>每个表都要&lt;strong>设置主键&lt;/strong>，标识符是引用行及通常使其唯一的方式。&lt;/p>
&lt;p>选择类型之后要在相关表中使用相同的类型。包括UNSIGNED等属性&lt;/p>
&lt;blockquote>
&lt;p>混合不同的数据类型可能会导致性能问题；隐式类型转换可能会出现难以发现的错误&lt;/p>
&lt;/blockquote>
&lt;p>选择最小数据类型。&lt;/p>
&lt;p>&lt;strong>整数类型&lt;/strong>&lt;/p>
&lt;p>整数通常是标识符的最佳选择，因为它们速度快，并且可以自动递增。AUTO_INCREMENT是一个列属性，可以为新的行自动生成一个整数类型的值。&lt;/p>
&lt;p>&lt;strong>字符串类型&lt;/strong>&lt;/p>
&lt;p>如果可能，应避免使用字符串类型作为标识符的数据类型，因为它们很消耗空间，而且通常比整数类型慢。&lt;/p>
&lt;p>对于&lt;strong>完全“随机”的字符串要非常小心&lt;/strong>，如MD5()、SHA1()或UUID()生成的字符串。这些函数生成的新值会任意分布在很大的空间内，这会&lt;strong>减慢INSERT和某些类型的SELECT查询的速度&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>因为&lt;strong>插入&lt;/strong>的值会写到索引的随机位置，所以会使得&lt;strong>INSERT查询变慢&lt;/strong>。这会导致页分裂、磁盘随机访问，以及对于聚簇存储引擎产生聚簇索引碎片。&lt;/li>
&lt;li>SELECT查询也会变慢，因为逻辑上&lt;strong>相邻的行会广泛分布在磁盘和内存中&lt;/strong>。&lt;/li>
&lt;li>对于所有类型的查询，随机值都会导致缓存的性能低下，因为它们会&lt;strong>破坏引用的局部性&lt;/strong>，而这正是缓存的工作原理。如果整个数据集都是“热的”，那么将任何特定部分的数据缓存到内存中都没有任何好处，而且如果工作集比内存大，缓存就会出现大量刷新和不命中。&lt;/li>
&lt;/ul>
&lt;p>如果存储通用&lt;strong>唯一标识符（UUID）值&lt;/strong>，则应该删除破折号，或者更好的做法是，使用UNHEX()函数将UUID值转换为16字节的数字，并将其存储在一个BINARY（16）列中。&lt;/p>
&lt;h3 id="特殊数据类型">特殊数据类型&lt;/h3>
&lt;p>&lt;strong>应该将IP地址存储为无符号整数&lt;/strong>。MySQL提供了INET_ATON()和INET_NTOA()函数来在这两种表示形式之间进行转换&lt;/p>
&lt;p>使用的空间从VARCHAR（15）的约16字节缩减到无符号32位整数的4字节。如果你担心数据库的可读性，不想继续使用函数查看行数据，请记住MySQL有视图，可以使用视图来简化数据查看的复杂性。&lt;/p>
&lt;h2 id="mysql-schema设计中的陷阱">MySQL schema设计中的陷阱&lt;/h2>
&lt;h3 id="太多的列">太多的列&lt;/h3>
&lt;p>MySQL的存储引擎API通过在服务器和存储引擎之间以行缓冲区格式复制行来工作&lt;/p>
&lt;p>InnoDB的行格式总是需要转换的。这种转换的成本取决于列数。&lt;/p>
&lt;h3 id="太多的联接">太多的联接&lt;/h3>
&lt;p>即使联接数远小于61，规划和优化查询的成本对MySQL来说也会成为问题。一个粗略的经验法则是，如果需要以高并发性快速执行查询，那么每个查询最好少于十几个的表。&lt;/p>
&lt;h3 id="null不是虚拟值">NULL不是虚拟值&lt;/h3>
&lt;p>即使需要在表中存储事实上的“空值”，也可能不需要使用NULL。也许可以&lt;strong>使用0、特殊值或空字符串作为代替&lt;/strong>。&lt;/p>
&lt;p>但是遵循这个原则也不要走极端。当需要表示未知值时，不要太害怕使用NULL。在某些情况下，使用NULL比使用某个虚拟常数更好。&lt;/p>
&lt;blockquote>
&lt;p>例如使用-1表示一个未知的整数，可能会使代码复杂化，容易引入bug，并通常会把事情搞得一团糟。处理NULL并不容易，但通常比其他替代方案更好。&lt;/p>
&lt;/blockquote></description></item><item><title>高性能MySQL-MySQL查询优化</title><link>https://leoxiewl.github.io/2024/02/09/high-performance-mysql/</link><pubDate>Fri, 09 Feb 2024 00:00:00 +0000</pubDate><guid>https://leoxiewl.github.io/2024/02/09/high-performance-mysql/</guid><description>&lt;p>要实现高效的查询，&lt;strong>查询优化、索引优化、库表结构优化&lt;/strong>需要齐头并进。&lt;/p>
&lt;p>本文主要围绕查询性能的优化&lt;/p>
&lt;h2 id="为什么查询的速度会慢">为什么查询的速度会慢？&lt;/h2>
&lt;p>关键在于响应时间。&lt;/p>
&lt;p>执行一个任务，可能这个任务由一系列的任务组成，只要优化它其中的子任务，让子任务运行的快，或者直接消除子任务，就能让整个响应时间快起来。在查询的整个过程中，从客户端到服务器，然后在服务器上进行语法解析，生成执行计划之后执行，再返回到客户端，要经过复杂的历程。&lt;/p>
&lt;p>&lt;img src="https://leoxiewl.github.io/%e9%ab%98%e6%80%a7%e8%83%bdMySQL-MySQL%e6%9f%a5%e8%af%a2%e4%bc%98%e5%8c%96.assets/image-20240209143039415.png"
loading="lazy"
alt="image-20240209143039415"
>&lt;/p>
&lt;p>在完成这些任务的时候，查询需要在不同的地方花费时间：&lt;/p>
&lt;ul>
&lt;li>包括网络&lt;/li>
&lt;li>CPU计算&lt;/li>
&lt;li>生成统计信息和执行计划&lt;/li>
&lt;li>锁等待（互斥等待）等操作&lt;/li>
&lt;/ul>
&lt;p>尤其是&lt;strong>向底层存储引擎检索数据的调用操作&lt;/strong>，这些调用需要在内存操作、CPU操作和内存不足时导致的I/O操作上消耗时间。根据存储引擎不同，可能还会产生&lt;strong>大量的上下文切换以及系统调用&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>优化查询的目的就是，减少和消除一些不必要的操作、消除重复了很多次的操作、优化某些执行太慢的操作&lt;/strong>。&lt;/p>
&lt;h2 id="优化查询排查的基本步骤">优化查询排查的基本步骤&lt;/h2>
&lt;h3 id="1-不访问不必要的数据">1. 不访问不必要的数据&lt;/h3>
&lt;ul>
&lt;li>确认应用程序是否在检索大量且不必要的数据。这通常意味着访问了太多的行，但有时候也可能是访问了太多的列。&lt;/li>
&lt;li>确认MySQL服务器层是否在分析大量不需要的数据行。&lt;/li>
&lt;li>向数据库请求了不需要的数据&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>有些查询会请求超过实际需要的数据，然后这些多余的数据会被应用程序丢弃。这会给MySQL服务器带来额外的负担，并增加网络开销，另外，这也会消耗应用服务器的CPU和内存资源。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>查询了不需要的记录&lt;/strong>&lt;/p>
&lt;p>一个常见的错误是，常常会误以为MySQL只会返回需要的数据，实际上MySQL却是先返回全部结果集再进行计算。&lt;/p>
&lt;blockquote>
&lt;p>例如，在新闻网站中取出100条记录，但是只是在页面上显示前面10条。有人会误以为MySQL执行查询只返回他们需要的10条数据，然后停止查询，实际情况是，MySQL会查询出全部的结果，然后客户端应用程序接收后再抛弃其中大部分数据。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>解决方案&lt;/strong>：在这样的查询后面加上&lt;strong>LIMIT子句&lt;/strong>&lt;/p>
&lt;p>&lt;strong>多表联接时返回全部列&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://leoxiewl.github.io/%e9%ab%98%e6%80%a7%e8%83%bdMySQL-MySQL%e6%9f%a5%e8%af%a2%e4%bc%98%e5%8c%96.assets/image-20240209143259425.png"
loading="lazy"
alt="image-20240209143259425"
>&lt;/p>
&lt;p>这将返回这三个表的全部数据列&lt;/p>
&lt;p>正确的方式应该是像下面这样只取需要的列：&lt;/p>
&lt;p>&lt;img src="https://leoxiewl.github.io/%e9%ab%98%e6%80%a7%e8%83%bdMySQL-MySQL%e6%9f%a5%e8%af%a2%e4%bc%98%e5%8c%96.assets/image-20240209143341307.png"
loading="lazy"
alt="image-20240209143341307"
>&lt;/p>
&lt;p>&lt;strong>总是取出全部列&lt;/strong>&lt;/p>
&lt;p>每次看到&lt;code>SELECT *&lt;/code>的时候都需要用怀疑的眼光审视，是不是真的需要返回全部的列，很可能不是必需的&lt;/p>
&lt;p>使用 &lt;code>SELECT *&lt;/code> 的缺点&lt;/p>
&lt;ul>
&lt;li>取出全部列，会让优化器无法完成索引覆盖扫描这类优化&lt;/li>
&lt;li>给服务器带来额外的I/O、内存和CPU的消耗&lt;/li>
&lt;/ul>
&lt;p>&lt;u>当然，查询返回超过需要的数据也不总是坏事&lt;/u>&lt;/p>
&lt;p>这种方式可以简化开发，能够提高相同代码片段的复用性。&lt;strong>如果清楚这样做对性能的影响，那么这种做法也是值得考虑的&lt;/strong>&lt;/p>
&lt;p>&lt;strong>重复查询相同的数据&lt;/strong>&lt;/p>
&lt;p>例如，在用户评论的地方需要查询用户头像的URL，那么在用户多次评论的时候，可能就会反复查询这个数据。比较好的方案是，当初次查询的时候将这个数据缓存起来，需要的时候从缓存中取出&lt;/p>
&lt;h3 id="2-mysql是否在扫描额外的记录">2. MySQL是否在扫描额外的记录&lt;/h3>
&lt;p>对于MySQL，最简单的衡量查询开销的三个指标如下：&lt;/p>
&lt;ul>
&lt;li>响应时间&lt;/li>
&lt;li>扫描的行数&lt;/li>
&lt;li>返回的行数&lt;/li>
&lt;/ul>
&lt;p>检查慢日志记录是找出扫描行数过多的查询的好办法。&lt;/p>
&lt;p>&lt;strong>响应时间&lt;/strong>&lt;/p>
&lt;p>响应时间是两部分之和：&lt;strong>服务时间和排队时间&lt;/strong>。服务时间是指数据库处理这个查询真正花了多长时间。排队时间是指服务器因为等待某些资源而没有真正执行查询的时间——可能是等I/O操作完成，也可能是等待行锁。遗憾的是，我们无法把响应时间细分到上面这些部分&lt;/p>
&lt;p>当你看到一个查询的响应时间时，首先需要问问自己，这个响应时间是否是一个合理的值。实际上可以使用“快速上限估计”法来估算查询的响应时间&lt;/p>
&lt;blockquote>
&lt;p>这是在Tapio Lahdenmaki和Mike Leach编写的Relational Database Index Design and the Optimizers（Wiley出版社出版）一书中提到的技术&lt;/p>
&lt;/blockquote>
&lt;p>概括地说，了解这个查询需要哪些索引以及它的执行计划是什么，然后计算大概需要多少个顺序和随机I/O，再用其乘以在具体硬件条件下一次I/O的消耗时间。最后把这些消耗都加起来，就可以获得一个大概参考值来判断当前响应时间是不是一个合理的值。&lt;/p>
&lt;p>&lt;strong>扫描的行数和返回的行数&lt;/strong>&lt;/p>
&lt;p>查看该查询扫描的行数是非常有帮助的。这在一定程度上能够说明该查询找到需要的数据的效率高不高。&lt;/p>
&lt;p>&lt;strong>扫描的行数和访问类型&lt;/strong>&lt;/p>
&lt;p>有些访问方式可能需要扫描很多行才能返回一行结果，也有些访问方式可能无须扫描就能返回结果。&lt;/p>
&lt;p>EXPLAIN语句中的type列反映了访问类型。访问类型有很多种，从全表扫描到索引扫描、范围扫描、唯一索引查询、常数引用等。这里列出的这些，速度从慢到快，扫描的行数从多到少&lt;/p>
&lt;p>如果你没办法找到合适的访问类型，那么最好的解决办法通常就是增加一个合适的索引&lt;/p>
&lt;p>&lt;strong>一般地，MySQL能够使用如下三种方式应用WHERE条件，从好到坏依次为：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>在&lt;strong>索引中使用WHERE条件&lt;/strong>来过滤不匹配的记录。这是在存储引擎层完成的&lt;/li>
&lt;/ul>
&lt;p>所以where条件后面的字段一定要加索引&lt;/p>
&lt;ul>
&lt;li>使用索引覆盖扫描（在Extra列中出现了Using index）来返回记录，直接从索引中过滤不需要的记录并返回命中的结果。这是在MySQL服务器层完成的，但无须再回表查询记录。&lt;/li>
&lt;/ul>
&lt;p>从整个索引树中拿到想要的记录&lt;/p>
&lt;ul>
&lt;li>从数据表中返回数据，然后过滤不满足条件的记录（在Extra列中出现Using where）。这在MySQL服务器层完成，MySQL需要先从数据表中读出记录然后过滤。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>如果发现查询需要扫描大量的数据但只返回少数行，那么通常可以尝试下面的技巧去优化它：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>使用索引覆盖扫描，把所有需要用的列都放到索引中，这样存储引擎无须回表获取对应行就可以返回结果了&lt;/li>
&lt;li>改变库表结构。例如，使用单独的汇总表&lt;/li>
&lt;li>重写这个复杂的查询，让MySQL优化器能够以更优化的方式执行这个查询&lt;/li>
&lt;/ul>
&lt;h3 id="3-重构查询">3. 重构查询&lt;/h3>
&lt;p>将查询转换为返回相同结果的等价形式，以获得更好的性能&lt;/p>
&lt;h4 id="一个复杂查询还是多个简单查询">一个复杂查询还是多个简单查询&lt;/h4>
&lt;p>&lt;strong>设计查询的时候，一个需要考虑的重要问题是，是否需要将一个复杂的查询分成多个简单的查询。&lt;/strong>&lt;/p>
&lt;p>在其他条件都相同的时候，使用尽可能少的查询当然是更好的。但是有时候，将一个大查询分解为多个小查询是很有必要的。&lt;/p>
&lt;blockquote>
&lt;p>别害怕这样做，好好衡量一下这样做是不是会减少工作量&lt;/p>
&lt;/blockquote>
&lt;p>不过，在设计应用的时候，&lt;strong>一个查询可以做的事情，就不要把这个查询设计成多个&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>我们看到有些应用对一个数据表做10次独立的查询来返回10行数据，每个查询返回一条结果，查询10次，这时可以使用单个查询获取10行数据。有的应用甚至每次只查询一个字段，获取一行数据就需要执行多次查询。&lt;/p>
&lt;/blockquote>
&lt;h4 id="将大查询切分成小查询">将大查询切分成小查询&lt;/h4>
&lt;p>&lt;strong>例子：删除旧的数据&lt;/strong>&lt;/p>
&lt;p>定期清除大量数据时，如果用一个大的语句一次性完成的话，则可能需要一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。将一个大的DELETE语句切分成多个较小的查询可以尽可能小地影响MySQL的性能，同时还可以降低MySQL复制的延迟&lt;/p>
&lt;p>&lt;img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/68316fde-9d30-4ee4-abfe-555755ca144e/48f2eff0-1b81-4dc5-b147-9feb1673f0a7/Untitled.png"
loading="lazy"
alt="Untitled"
>&lt;/p>
&lt;p>一次删除一万行数据一般来说是一个比较高效而且对服务器[插图]影响最小的做法（如果是事务型引擎，很多时候小事务能够更高效）&lt;/p>
&lt;p>如果每次删除数据后，都&lt;strong>暂停一会儿再做下一次删除&lt;/strong>，也可以将服务器上原本一次性的压力分散到一个很长的时间段中，可以大大降低对服务器的影响，还可以大大减少删除时锁的持有时间。&lt;/p>
&lt;h4 id="干掉连接查询-join">干掉连接查询 join&lt;/h4>
&lt;p>&lt;strong>高性能的应用都会对联接查询进行分解&lt;/strong>&lt;/p>
&lt;p>简单地说，可以对每一个表进行一次单表查询，然后将结果在应用程序中进行联接&lt;/p>
&lt;p>例如，下面这个查询&lt;/p>
&lt;p>&lt;img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/68316fde-9d30-4ee4-abfe-555755ca144e/5ea768cd-bf0b-4f2d-8842-9d69ae1328ee/Untitled.png"
loading="lazy"
alt="Untitled"
>&lt;/p>
&lt;p>可以分解成下面这些查询来代替：&lt;/p>
&lt;p>&lt;img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/68316fde-9d30-4ee4-abfe-555755ca144e/b0a75c70-2efd-4f84-bcf6-15eb1e82e3c3/Untitled.png"
loading="lazy"
alt="Untitled"
>&lt;/p>
&lt;p>&lt;strong>用分解联接查询的方式重构查询有如下优势&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>让缓存的效率更高&lt;/li>
&lt;/ul>
&lt;p>许多应用程序可以方便地缓存单表查询对应的结果对象&lt;/p>
&lt;blockquote>
&lt;p>例如，上面查询中的tag mysql已经被缓存了，那么应用就可以跳过第一个查询。再例如，应用中已经缓存了ID为123、567、9098的内容，那么第三个查询的IN()中就可以少几个ID。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>将查询分解后，执行单个查询可以减少锁的竞争。&lt;/li>
&lt;li>在应用层做联接，可以更容易对数据库进行拆分，更容易做到高性能和可扩展。&lt;/li>
&lt;li>查询本身的效率也可能会有所提升&lt;/li>
&lt;/ul>
&lt;p>在这个例子中，使用IN()代替联接查询，可以让MySQL按照ID顺序进行查询，这可能比随机的联接要更高效。&lt;/p>
&lt;ul>
&lt;li>可以减少对冗余记录的访问&lt;/li>
&lt;/ul>
&lt;p>在应用层做联接查询，意味着对于某条记录应用只需要查询一次，而在数据库中做联接查询，则可能需要重复地访问一部分数据。从这点看，这样的重构还可能会减少网络和内存的消耗。&lt;/p>
&lt;p>&lt;strong>在有些场景下，在应用程序中执行联接操作会更加有效&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>当可以缓存和重用之前查询结果中的数据时&lt;/li>
&lt;li>当在多台服务器上分发数据时&lt;/li>
&lt;li>当能够使用IN()列表替代联接查询大型表时&lt;/li>
&lt;li>当一次联接查询中多次引用同一张表时&lt;/li>
&lt;/ul>
&lt;p>下面的解释由AI生成&lt;/p>
&lt;ol>
&lt;li>&lt;strong>当可以缓存和重用之前查询结果中的数据时&lt;/strong>：在某些情况下，你可能会在查询中重复使用某个子查询的结果。在这种情况下，联接查询可以帮助你避免重复查询数据库。例如：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">addresses&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">city&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;北京&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，我们在子查询中获取了所有年龄大于20岁的用户和住在北京的地址，然后将这两个子查询的结果进行联接。&lt;/p>
&lt;ol>
&lt;li>&lt;strong>当在多台服务器上分发数据时&lt;/strong>：当你的数据被分布在多台服务器上时，你可能需要通过联接查询来获取你需要的数据。例如，你的用户数据和订单数据可能被存储在不同的服务器上，你可以通过联接查询来获取用户的订单信息。&lt;/li>
&lt;li>&lt;strong>当能够使用IN()列表替代联接查询大型表时&lt;/strong>：在某些情况下，使用IN()列表可能会比联接大型表更高效。例如，如果你只需要从大型表中获取少量数据，你可以先从小表中获取这些数据的ID，然后再使用IN()列表来查询大表。例如：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">big_table&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">IN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">small_table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>&lt;strong>当一次联接查询中多次引用同一张表时&lt;/strong>：在某些情况下，你可能需要在同一次查询中多次引用同一张表。在这种情况下，联接查询可以帮助你更方便地获取你需要的数据。例如，你可能需要获取用户的订单信息和地址信息，这两个信息可能都存储在同一张表中，你可以通过联接查询来获取这些信息。例如：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">orders&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">addresses&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>